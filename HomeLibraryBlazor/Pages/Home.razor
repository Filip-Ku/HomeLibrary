@page "/library"

<PageTitle>Home Library</PageTitle>

@inject HttpClient Http

<button @onclick="toggleForm" class="addbutton">
    @if (!showForm)
    {
        <span>New Book</span>
    }
    else
    {
        <span>Close Form</span>
    }
</button>

@if (showForm)
{
    <div class="form-container">
        <h3>Add New Book</h3>
        <EditForm Model="newBook" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="Title">Title:</label>
                <InputText id="Title" class="form-control" @bind-Value="newBook.Title" />
            </div>

            <div class="form-group">
                <label for="Author">Author:</label>
                <InputText id="Author" class="form-control" @bind-Value="newBook.Author" />
            </div>

            <div class="form-group">
                <label for="Year">Year:</label>
                <InputNumber id="Year" class="form-control" @bind-Value="newBook.Year" />
            </div>

            <div class="form-group">
                <label for="Publisher">Publisher:</label>
                <InputText id="Publisher" class="form-control" @bind-Value="newBook.Publisher" />
            </div>

            <div class="form-group">
                <label for="Genre">Genre:</label>
                <InputText id="Genre" class="form-control" @bind-Value="newBook.Genre" />
            </div>

            <div class="form-group">
                <label for="Description">Description:</label>
                <InputTextArea id="Description" class="form-control" @bind-Value="newBook.Description" />
            </div>

            <div class="form-group">
                <label for="ImageUrl">Image URL:</label>
                <InputText id="ImageUrl" class="form-control" @bind-Value="newBook.ImageUrl" />
            </div>

            <button type="submit" class="btn btn-primary">Add Book</button>
        </EditForm>
    </div>
}

<ul class="book-list">
    @foreach (var book in booksInLibrary)
    {
         @if (book.Wishlist == false)
         {
            <li class="book-item">
                <img src="@book.ImageUrl" alt="@book.Title" class="book-image" />
                <div class="book-details">
                    <h3 class="book-title">@book.Title</h3>
                    <p class="book-author"><strong>Author:</strong> @book.Author</p>
                    <p class="book-year"><strong>Year:</strong> @book.Year</p>
                    <p class="book-genre"><strong>Genre:</strong> @book.Genre</p>
                    <p class="book-publisher"><strong>Publisher:</strong> @book.Publisher</p>
                    <p class="book-description">@book.Description</p>
                </div>
            </li>
         }
    }
</ul>

@if (booksInLibrary.Count == 0)
{
    <p>No books available.</p>
}

@if (isLoading)
{
    <p>Loading books...</p>
}

@if (errorMessage != null)
{
    <p style="color: red;">Error: @errorMessage</p>
}

@code {
    private List<Book> booksInLibrary = new List<Book>();
    private bool isLoading = false;
    private string? errorMessage = null;
    private bool showForm = false;

    private Book newBook = new Book(); 

    protected override async Task OnInitializedAsync()
    {
        await fetch_data_from_backend();
    }

    private void toggleForm()
    {
        showForm = !showForm;
    }

    private async Task HandleSubmit()
    {
        var response = await Http.PostAsJsonAsync("http://localhost:5107/library", newBook);

        if (response.IsSuccessStatusCode)
        {
            await fetch_data_from_backend();
            showForm = false;
        }
        else
        {
            errorMessage = "Error adding the book.";
        }
    }

    private async Task fetch_data_from_backend()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            var response = await Http.GetAsync("http://localhost:5107/library");

            if (response.IsSuccessStatusCode)
            {
                booksInLibrary = await response.Content.ReadFromJsonAsync<List<Book>>() ?? new List<Book>();
            }
            else
            {
                errorMessage = "Error fetching data.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class Book
    {
        public string Title { get; set; } = string.Empty;
        public string Author { get; set; } = string.Empty;
        public int Year { get; set; }
        public string Publisher { get; set; } = string.Empty;
        public string Genre { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string ImageUrl { get; set; } = string.Empty;
        public bool Wishlist { get; set; } = false; // Default value
    }
}

<style>
    .addbutton {
        background-color: #007acc;
        color: #fff;
        border: none;
        border-radius: 4px;
        padding: 10px 20px;
        cursor: pointer;
        margin: auto;
        transition: background-color 0.3s ease;
    }

    .form-container {
        margin-top: 20px;
        background-color: #f5f5f5;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .btn-primary {
        background-color: #007acc;
        color: white;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
        border-radius: 4px;
    }
</style>
